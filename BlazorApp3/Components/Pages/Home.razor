@page "/"
@using RecipeGiverApp.Web.Components.Layout
@using RecipeGiverApp.Web.Reusables
@using ReciveGiverApp.Models.Models

@inject HttpClient Http


<MudExpansionPanels MultiExpansion="true">
    @foreach (Category category in categories)
    {
        <MudExpansionPanel Text="@category.CategoryName" Style="background-color: lightgoldenrodyellow">

            <MudExpansionPanels MultiExpansion="true">

                @foreach (Recipe recip in recipes)
                {

                    @if (recip.CategoryID == category.CategoryId)
                    {
                        <MudExpansionPanel Text="@recip.RecipeName">
                            <MudPaper Class="border-solid border-2 pa-4" Style="border-color: red">
                                <RecipeDisplay Recipe="recip" Favourites="favouriteRecipesIDs" AllowFavouritesChange="true"></RecipeDisplay>
                            </MudPaper>
                        </MudExpansionPanel>
                    }
                }

            </MudExpansionPanels>

        </MudExpansionPanel>
    }
</MudExpansionPanels>



@code
{
    List<Category> categories = new List<Category>();
    List<Recipe> recipes = new List<Recipe>();
    List<int> favouriteRecipesIDs = new List<int>(); 

    Recipe test = new Recipe();

    protected override async Task OnInitializedAsync()
    {
        categories = await GetCategoriesAsync();
        recipes = await GetRecipesAsync();
        favouriteRecipesIDs = await GetFavouritesAsync();
    }

    private async Task<List<Category>> GetCategoriesAsync()
    {
        List<Category> newCategories;
        try
        {
            var response = await Http.GetAsync("/Category/GetCategories");

            if (response.IsSuccessStatusCode)
            {
                newCategories = await response.Content.ReadFromJsonAsync<List<Category>>();
                return newCategories ?? new List<Category>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Console.WriteLine("Recipes not found");
                return new List<Category>();
            }
            else
            {
                Console.WriteLine("An error occurred while fetching the recipes");
                return new List<Category>();
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the request
            Console.WriteLine($"An error occurred: {ex.Message}");
            return new List<Category>();
        }
    }

    private async Task<List<Recipe>> GetRecipesAsync()
    {
        List<Recipe> newRecipes;
        try
        {
            var response = await Http.GetAsync("/RecipeIngredient/GetRecipesWithIngredients");

            if (response.IsSuccessStatusCode)
            {
                newRecipes = await response.Content.ReadFromJsonAsync<List<Recipe>>();
                return newRecipes ?? new List<Recipe>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Console.WriteLine("Recipes not found");
                return new List<Recipe>();
            }
            else
            {
                Console.WriteLine("An error occurred while fetching the recipes");
                return new List<Recipe>();
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the request
            Console.WriteLine($"An error occurred: {ex.Message}");
            return new List<Recipe>();
        }
    }

    private async Task<List<int>> GetFavouritesAsync()
    {
        List<int> newFav;
        try
        {
            var response = await Http.GetAsync("/Favourites/GetFavourities");

            if (response.IsSuccessStatusCode)
            {
                newFav = await response.Content.ReadFromJsonAsync<List<int>>();
                return newFav ?? new List<int>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Console.WriteLine("Recipes not found");
                return new List<int>();
            }
            else
            {
                Console.WriteLine("An error occurred while fetching the recipes");
                return new List<int>();
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the request
            Console.WriteLine($"An error occurred: {ex.Message}");
            return new List<int>();
        }
    }

}
