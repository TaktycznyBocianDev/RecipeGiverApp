@page "/AddRecipe"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using RecipeGiverApp.Web.Reusables
@using ReciveGiverApp.Models.Models

@inject HttpClient Http

<MudGrid>
    <MudItem xs="10" sm="10">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Nazwa Przepisu" Required="true" RequiredError="Przepis musi mieć nazwę!" />
                <MudTextField T="string" Label="Kaloryczność" Required="true" RequiredError="Wprowadź kaloryczność danego przepisu" />
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudSpacer>

    </MudSpacer>

    <MudItem xs="10" sm="10">
    <MudPaper Class="pa-4">
        @foreach (IngredientSelector ingredientSelector in ingredientSelectors)
        {
            <MudItem xs="10" sm="10">
                    <IngredientSelector Ingredients="ingredients" OnSelected="OnIngredientSelected" OnDeselected="OnIngredientDeselected"></IngredientSelector>
            </MudItem>
            <MudSpacer></MudSpacer>
        }
    </MudPaper>
    </MudItem>


    <MudSpacer>

    </MudSpacer>
    <MudItem xs="10" sm="10">
        <MudPaper Class="pa-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@AddRecipe" Class="mx-2">Dodaj Przepis</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudForm form;

    List<IngredientSelector> ingredientSelectors = new List<IngredientSelector>();
    List<Ingredient> ingredients = new List<Ingredient>();

    protected override async Task OnInitializedAsync()
    {
        ingredients = await GetIngredientsAsync();
        ingredientSelectors.Add(new IngredientSelector());
    }

    private async Task<List<Ingredient>> GetIngredientsAsync()
    {
        List<Ingredient> ingredients;
        try
        {
            var response = await Http.GetAsync("/Ingredient/GetIngredients");

            if (response.IsSuccessStatusCode)
            {
                ingredients = await response.Content.ReadFromJsonAsync<List<Ingredient>>();
                return ingredients ?? new List<Ingredient>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Console.WriteLine("Ingredients not found");
                return new List<Ingredient>();
            }
            else
            {
                Console.WriteLine("An error occurred while fetching the ingredients");
                return new List<Ingredient>();
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the request
            Console.WriteLine($"An error occurred: {ex.Message}");
            return new List<Ingredient>();
        }
    }

    private void OnIngredientSelected()
    {
        ingredientSelectors.Add(new IngredientSelector());
    }

    private void OnIngredientDeselected()
    {
        ingredientSelectors.RemoveAt(ingredientSelectors.Count-1);
    }

    private void AddRecipe()
    {
        // Placeholder for functionality to add a recipe
        Console.WriteLine("Recipe added!");
    }
}
