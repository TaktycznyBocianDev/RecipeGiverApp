@using MudBlazor
@using ReciveGiverApp.Models.Models

@inject HttpClient Http

<MudStack Row="true">
    @if (Checked)
    {
        <MudGrid>
            <MudItem xs="3">
                <MudText Typo="Typo.h6" Color="Color.Primary" Bold="true">@_selectedIngredient.IngredientName</MudText>
            </MudItem>
            <MudItem xs="2">
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">@_selectedIngredient.Quantity</MudText>
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.HighlightOff" Color="Color.Error" aria-label="Usuń składnik" OnClick="OnIngredientUnselected">Usuń</MudButton>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudSelect T="Ingredient" @bind-Value="SelectedIngredient" Label="Wybierz składnik" Required="true">
            @foreach (Ingredient ingredient in Ingredients)
            {
                <MudSelectItem Value="ingredient">@ingredient.IngredientName</MudSelectItem>
            }
        </MudSelect>

        <MudTextField @bind-Value="SelectedIngredient.Quantity" Label="Podaj Wymaganą ilość danego składnika" Required="true" />

        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" aria-label="Dodaj składnik" OnClick="OnIngredientSelected" Disabled="@(!IsFormValid())">Dodaj Składnik</MudButton>

    }
</MudStack>

@code
{
    [Parameter]
    public EventCallback<Ingredient> OnSelected { get; set; }

    [Parameter]
    public EventCallback OnDeselected { get; set; }

    [Parameter]
    public List<Ingredient>? Ingredients { get; set; }

    [Parameter]
    public bool Checked { get; set; }

    private Ingredient _selectedIngredient = new Ingredient();

    public Ingredient SelectedIngredient
    {
        get
        {
            if (_selectedIngredient == null || string.IsNullOrEmpty(_selectedIngredient.IngredientName))
            {
                return Ingredients.FirstOrDefault();
            }
            else return _selectedIngredient;
        } 
        set
        {
            if (_selectedIngredient != value)
            {
                _selectedIngredient = value;
            }
        }
    }

    protected override Task OnInitializedAsync()
    {
        Checked = false;
        _selectedIngredient = Ingredients.FirstOrDefault();
        return base.OnInitializedAsync();
    }

    private void OnIngredientSelected()
    {
        OnSelected.InvokeAsync(_selectedIngredient);  // Notify parent about the change
        Checked = true;
    }

    private void OnIngredientUnselected()
    {
        _selectedIngredient = new Ingredient();
        _selectedIngredient.IngredientName = "Wybierz Składnik";
        OnDeselected.InvokeAsync();
        Checked = false;
    }

    // Check if both the ingredient and quantity are valid for enabling the button
    private bool IsFormValid()
    {
        return !string.IsNullOrEmpty(SelectedIngredient.IngredientName) && !string.IsNullOrWhiteSpace(SelectedIngredient.Quantity);
    }
}
