@using MudBlazor
@using ReciveGiverApp.Models.Models

@inject HttpClient Http

<MudStack Row="true">

    @if (Checked)
    {
        <MudGrid>
            <MudItem xs="3">
                <MudText Typo="Typo.h6" Color="Color.Primary" Bold="true">@_selectedIngredient.IngredientName</MudText>
            </MudItem>
            <MudItem xs="2">
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">@_selectedIngredient.Quantity</MudText>
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.HighlightOff" Color="Color.Error" aria-label="Usuń składnik" OnClick="OnIngredientUnselected">Usuń</MudButton>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudGrid>
            <!-- First Section: Select, Quantity, and Add Button in one line -->
            <MudItem xs="12" sm="12">
                <MudGrid>
                    <MudItem xs="4" sm="4">
                        <MudSelect T="Ingredient" @bind-Value="SelectedIngredient" Label="Wybierz składnik" Required="true">
                            @foreach (Ingredient ingredient in Ingredients)
                            {
                                <MudSelectItem Value="ingredient">@ingredient.IngredientName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="5" sm="5">
                        <MudTextField @bind-Value="SelectedIngredient.Quantity" Label="Podaj Wymaganą ilość danego składnika" Required="true" />
                    </MudItem>
                    <MudItem xs="2" sm="2">
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" aria-label="Dodaj składnik" OnClick="OnIngredientSelected" Disabled="@(!IsFormValid())">Dodaj Składnik</MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudDivider></MudDivider>

            <!-- Second Section: Custom Ingredient Text Field and Add Button in one line -->
            <MudItem xs="12" sm="12">
                <MudGrid>
                    <MudItem xs="9" sm="9">
                        <MudTextField @bind-Value="_customIngredient.IngredientName" Label="Brak składnika na liście? Dodaj go tutaj!"/>
                    </MudItem>
                    <MudItem xs="3" sm="3">
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" aria-label="Dodaj nowy składnik" OnClick="OnCustomIngredientAdded">Dodaj Nowy Składnik</MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    }

</MudStack>


@code
{
    [Parameter]
    public EventCallback<Ingredient> OnSelected { get; set; }

    [Parameter]
    public EventCallback<Ingredient> OnDeselected { get; set; }

    [Parameter]
    public List<Ingredient>? Ingredients { get; set; }


    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public bool addCustom { get; set; }

    private Ingredient _selectedIngredient = new Ingredient();
    public Ingredient _customIngredient = new Ingredient();

    public Ingredient SelectedIngredient
    {
        get
        {
            if (_selectedIngredient == null || string.IsNullOrEmpty(_selectedIngredient.IngredientName))
            {
                return Ingredients.FirstOrDefault();
            }
            else return _selectedIngredient;
        }
        set
        {
            if (_selectedIngredient != value)
            {
                _selectedIngredient = value;
            }
        }
    }

    protected override Task OnInitializedAsync()
    {
        addCustom = false;
        Checked = false;
        _selectedIngredient = Ingredients.FirstOrDefault();
        return base.OnInitializedAsync();
    }

    private void OnIngredientSelected()
    {
        OnSelected.InvokeAsync(SelectedIngredient);  // Notify parent about the change
        Checked = true;
    }

    private void OnIngredientUnselected()
    {
        _selectedIngredient = new Ingredient();
        _selectedIngredient.IngredientName = "Wybierz Składnik";
        OnDeselected.InvokeAsync(SelectedIngredient);
        Checked = false;
    }

    private async Task OnCustomIngredientAdded()
    {
        if (!string.IsNullOrWhiteSpace(_customIngredient.IngredientName))
        {
            try
            {
                // Post the new ingredient to the server
                await Http.PostAsJsonAsync("/Ingredient/CreateIngredients", _customIngredient);

                // Add the new ingredient to the local list
                Ingredients.Add(_customIngredient);

                // Set the newly added ingredient as the selected one
                SelectedIngredient = _customIngredient;

                // Clear the custom ingredient input for future entries
                _customIngredient = new Ingredient();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                throw;
            }
        }
    }


    // Check if both the ingredient and quantity are valid for enabling the button
    private bool IsFormValid()
    {
        return !string.IsNullOrEmpty(SelectedIngredient.IngredientName) && !string.IsNullOrWhiteSpace(SelectedIngredient.Quantity);
    }
}