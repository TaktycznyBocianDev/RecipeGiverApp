@using MudBlazor
@using ReciveGiverApp.Models.Models

@inject HttpClient Http

<MudStack Row="true">

    @if (Checked)
    {
        <MudGrid>
            <MudItem xs="3">
                <MudText Typo="Typo.h6" Color="Color.Primary" Bold="true">@_instruction</MudText>
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.HighlightOff" Color="Color.Error" aria-label="Usuń instrukcję" OnClick="OnInstructionUnselected">Usuń</MudButton>
            </MudItem>
        </MudGrid> 
    }
    else
    {
        <MudTextField @bind-Value="_instruction" Label="Podaj kolejną instrukcję -> nie przejmuj sie numeracją :)" Required="true"></MudTextField>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" aria-label="Dodaj instrukcję" OnClick="OnInstructionSelected" Disabled="@string.IsNullOrWhiteSpace(_instruction)">Dodaj Instrukcję</MudButton>
    }

</MudStack>

@code
{
    [Parameter]
    public EventCallback<string> OnAccepted { get; set; }

    [Parameter]
    public EventCallback<string> OnRejected { get; set; }

    [Parameter]
    public bool Checked { get; set; }

    private string _instruction = "";
    public string ProvidedInstruction
    {
        get => _instruction;
        set
        {
            if (_instruction != value)
            {
                _instruction = value;
            }
        }
    }

    private bool instructionModified;

    protected override Task OnInitializedAsync()
    {
        Checked = false;
        return base.OnInitializedAsync();
    }

    private void OnInstructionSelected()
    {
        OnAccepted.InvokeAsync(_instruction);
        Checked = !Checked;
    }

    private void OnInstructionUnselected()
    {
        _instruction = "none";
        OnRejected.InvokeAsync();
        Checked = !Checked;
    }
}
