@using MudBlazor
@using ReciveGiverApp.Models.Models

@inject HttpClient Http

<MudContainer Fixed="true">
    <MudGrid Justify="Justify.SpaceEvenly">
        <MudItem xs="6">
            <MudText Typo="Typo.h3">@Recipe.RecipeName</MudText>
        </MudItem>
        <MudItem xs="5">
            <MudText Typo="Typo.h4">Kalorie: @Recipe.Kilocalories kcal</MudText>
        </MudItem>
        <MudItem xs="1">
            @if (@isFav)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Secondary" aria-label="Dodaj do ulubionych" Size="Size.Large" OnClick="@ToggleFavourite"></MudIconButton>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Outlined.FavoriteBorder" Color="Color.Secondary" aria-label="Dodaj do ulubionych" Size="Size.Large" OnClick="@ToggleFavourite"></MudIconButton>
            }
        </MudItem>

        <MudFlexBreak />

        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h4">Ingredients:</MudText>
                @foreach (Ingredient ingredient in Recipe.Ingredients)
                {
                    <MudText Typo="Typo.h5">@ingredient.IngredientName</MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h4">Instructions:</MudText>
                @foreach (string instruction in splittedRecipes)
                {
                    <MudText Typo="Typo.h5">@instruction</MudText>
                }
            </MudPaper>
        </MudItem>

        <MudFlexBreak />

        <MudItem xs="12">
            <MudPaper>
                <MudText Typo="Typo.h5">Fit Porada:</MudText>
                <MudText Typo="Typo.h6">@Recipe.FitPorada</MudText>
            </MudPaper>
        </MudItem>

    </MudGrid>

</MudContainer>

@code {
    [Parameter]
    public Recipe Recipe { get; set; } = new Recipe();

    [Parameter]
    public List<int> Favourites { get; set; } = new List<int>();
    private bool isFav = false;

    private List<string> splittedRecipes;

    protected override void OnParametersSet()
    {
        splittedRecipes = StringSplitter.SplitStringByNumberedSections(Recipe.Instructions);

        isFav = IsFavourite(Favourites, Recipe);
    }

    private bool IsFavourite(List<int> favourites, Recipe recipe)
    {
        return favourites.Any(fav => fav == recipe.RecipeID);
    }

    private async Task ToggleFavourite()
    {
        if (isFav)
        {
            await RemoveFromFavourites();
        }
        else
        {
            await AddToFavourites();
        }

        isFav = !isFav;
    }

    private async Task AddToFavourites()
    {
        try
        {
            await Http.PostAsJsonAsync($"/Favourites/AddToFavouritiesById?recipeID={Recipe.RecipeID}", Recipe.RecipeID);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    }

    private async Task RemoveFromFavourites()
    {
        try
        {
            await Http.DeleteAsync($"/Favourites/RemoveFromFavouritiesById?recipeID={Recipe.RecipeID}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    }
}
