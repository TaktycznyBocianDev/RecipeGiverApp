@using MudBlazor
@using ReciveGiverApp.Models.Models

@inject HttpClient Http
@inject ISnackbar Snackbar

<MudContainer Fixed="true">
    <MudGrid Justify="Justify.SpaceEvenly">
        <MudItem xs="5">
            <MudText Typo="Typo.h3">@Recipe.RecipeName</MudText>
        </MudItem>
        <MudItem xs="5">
            <MudText Typo="Typo.h4">Kalorie: @Recipe.Kilocalories kcal</MudText>
        </MudItem>
        @if (AllowFavouritesChange)
        {
            <MudItem xs="1">
                @if (@isFav)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Secondary" aria-label="Dodaj do ulubionych" Size="Size.Large" OnClick="@ToggleFavourite"></MudIconButton>
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.FavoriteBorder" Color="Color.Secondary" aria-label="Dodaj do ulubionych" Size="Size.Large" OnClick="@ToggleFavourite"></MudIconButton>
                }
            </MudItem>
        }
        @if (Removable)
        {
            <MudItem xs="1">
                <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Error" aria-label="Usuń przepis" Size="Size.Large" OnClick="@OnRemoveRecipe"></MudIconButton>
            </MudItem>
        }
        @if (Replaceable)
        {
            <MudItem xs="1">
                <MudIconButton Icon="@Icons.Material.Filled.Replay" Color="Color.Error" aria-label="Zamień przepis" Size="Size.Large"></MudIconButton>
            </MudItem>
        }
        
        


        <MudFlexBreak />

        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h4">Ingredients:</MudText>
                @foreach (Ingredient ingredient in Recipe.Ingredients)
                {
                    <MudText Typo="Typo.h5">@ingredient.IngredientName</MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h4">Instructions:</MudText>
                @foreach (string instruction in splittedRecipes)
                {
                    <MudText Typo="Typo.h5">@instruction</MudText>
                }
            </MudPaper>
        </MudItem>

        <MudFlexBreak />

        <MudItem xs="12">
            <MudPaper>
                <MudText Typo="Typo.h5">Komentarz:</MudText>
                <MudStack Row="true">
                    @if (!editComment)
                    {

                        <MudItem xs="12">
                            <MudStack Row="true">
                                <MudItem xs="12">
                                    <MudPaper>
                                        <MudText Typo="Typo.h4">@Recipe.FitPorada</MudText>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="0">
                                    <MudPaper>
                                        <MudToggleIconButton @bind-Toggled="editComment"
                                                             Icon="@Icons.Material.Filled.Edit"
                                                             Color="@Color.Success"
                                                             ToggledIcon="@Icons.Material.Filled.EditOff"
                                                             ToggledColor="@Color.Error"
                                                             Size="Size.Medium"
                                                             title="Edytuj komentarz" />
                                    </MudPaper>
                                </MudItem>
                            </MudStack>
                        </MudItem>
                    }
                    else
                    {
                        <MudItem xs="12">
                            <MudStack Row="true">
                                <MudTextField @bind-Value="Recipe.FitPorada" T="string" Text="@Recipe.FitPorada" Label="Komentarz" Typo="Typo.h4" AutoGrow></MudTextField>
                                <MudIconButton OnClick="@UpdateCommentAndUI" Icon="@Icons.Material.Filled.AddTask" Color="Color.Success" aria-label="Zatwierdz zmiany"></MudIconButton>
                                <MudToggleIconButton @bind-Toggled="editComment"
                                                     Icon="@Icons.Material.Filled.Edit"
                                                     Color="@Color.Success"
                                                     ToggledIcon="@Icons.Material.Filled.EditOff"
                                                     ToggledColor="@Color.Error"
                                                     Size="Size.Medium"
                                                     title="Edytuj komentarz" />
                            </MudStack>
                        </MudItem>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>

    </MudGrid>

</MudContainer>

@code {

    /// <summary>
    /// Recipe to display
    /// </summary>
    [Parameter]
    public Recipe Recipe { get; set; } = new Recipe();
    /// <summary>
    /// List of current favourite recipes
    /// </summary>
    [Parameter]
    public List<int> Favourites { get; set; } = new List<int>();
    /// <summary>
    /// True will display button for adding/removing this item from favourites.
    /// </summary>
    [Parameter]
    public bool AllowFavouritesChange { get; set; } = true;
    [Parameter]
    public bool Removable { get; set; } = true;
    [Parameter]
    public bool Replaceable { get; set; } = false;

    [Parameter]
    public EventCallback<string> OnRemovedRecipe { get; set; }

    private bool editComment = false;

    private bool isFav = false;

    private List<string> splittedRecipes;

    protected override void OnParametersSet()
    {
        splittedRecipes = StringSplitter.SplitStringByNumberedSections(Recipe.Instructions);

        isFav = IsFavourite(Favourites, Recipe);
    }

    private bool IsFavourite(List<int> favourites, Recipe recipe)
    {
        return favourites.Any(fav => fav == recipe.RecipeID);
    }

    private async Task ToggleFavourite()
    {
        if (isFav)
        {
            await RemoveFromFavourites();
        }
        else
        {
            await AddToFavourites(Recipe);
        }

        isFav = !isFav;
    }

    private async Task AddToFavourites(Recipe recipe)
    {
        try
        {
            await Http.PostAsJsonAsync($"/Favourites/AddToFavouritiesById?recipeID={recipe.RecipeID}", recipe.RecipeID);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    }

    private async Task RemoveFromFavourites()
    {
        try
        {
            await Http.DeleteAsync($"/Favourites/RemoveFromFavouritiesById?recipeID={Recipe.RecipeID}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    }

    private async Task UpdateComment()
    {
        try
        {
            await Http.PutAsJsonAsync($"Recipe/UpdateRecipeAsync?OldName={Recipe.RecipeName}", Recipe);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task UpdateCommentAndUI()
    {
        await UpdateComment();
        Snackbar.Add("Komentarz zmodyfikowany");
        editComment = !editComment;
    }

    private async Task OnRemoveRecipe()
    {
        Recipe removedRecipe = Recipe;
        bool removeRecipeWasFavourite = isFav;
        await RemoveRecipe();
        ShowSnackbarRemove(removedRecipe, removeRecipeWasFavourite);
        await OnRemovedRecipe.InvokeAsync("Child component changed!");
    }

    void ShowSnackbarRemove(Recipe recipToRestore, bool wasFav)
    {
        Snackbar.Add("Przepis usunięty!", Severity.Normal, config =>
        {
            config.Action = "Cofnij";
            config.ActionColor = Color.Error;
            config.Onclick = snackbar =>
            {
                CancelRemoveRecipe(recipToRestore, wasFav);
                OnRemovedRecipe.InvokeAsync("Child component changed!");
                return Task.CompletedTask;
            };
        });
    }

    private async Task RemoveRecipe()
    {

        try
        {
            await Http.DeleteAsync($"/RecipeIngredient/DeleteRecipe?recipeName={Recipe.RecipeName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task CancelRemoveRecipe(Recipe recipToRestore, bool wasFav)
    {
        try
        {
            await Http.PostAsJsonAsync("/RecipeIngredient/CreateRecipeWithIngredients", recipToRestore);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

        if (wasFav)
        {
            await AddToFavourites(recipToRestore);
        }

    }
}
